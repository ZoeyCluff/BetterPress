---
    - hosts: localhost
      connection: local
      become: true

      vars:
        db_password: "{{ lookup('password', './passwordfile chars=ascii_letters,digits,hexdigits,punctuation') }}"

      vars_prompt:
        - name: "domainShort"
          prompt: "What is the domain (without .com/.net)?"


        - name: "domainLong"
          prompt: "What is the domain with .com/.net?"

        - name: "cfemail"
          prompt: "What is your cloudflare email?"

        - name: "cfapi"
          prompt: "What is your cloudflare API key?"

        - name: "mysqluser"
          prompt: "What is your mysql user (that can create users and databases)?"
          default: root
        - name: "mysqlpassword"
          prompt: "What is the password for your mysql user?"

        - name: "mysqlHost"
          prompt: "What is the mysql Server IP / hostname?"
          default: 127.0.0.1

        - name: "ipv4"
          prompt: "What is the ipv4 address of your server?"

        - name: "ipv6"
          prompt: "What is the ipv6 address of your server?"



      tasks:

        - name: allow the installation of PHP 7.1 on ubuntu 17.04
          apt_repository:
            repo: 'ppa:ondrej/php'

        - name: ensure that nginxconfig.conf exists
          stat:
            path: ./configs/nginxconfig.conf.j2
          register: nginx
          failed_when: nginx.stat.exists == False

        - name: ensure that wordpress's config exists
          stat:
            path: ./configs/wp-config-sample.php.j2
          register: wpconfig
          failed_when: wpconfig.stat.exists == False

        - name: ensure ssl folder exists
          file:
            path: /etc/nginx/ssl/
            state: directory

        - name: ensure ssl dhparam exists
          stat:
            path: /etc/nginx/ssl/dhparam.pem
          register: missingdhparam

        - name: ensure ssl folder exists
          file:
            path: /etc/nginx/ssl/
            state: directory
          when: missingdhparam.stat.exists == False

        - name: generate dhprams
          command: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
          when: missingdhparam.stat.exists == False

        - name: update cache

          apt: update_cache=yes
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")

        - name: update system

          apt: upgrade=dist
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")

        - name: install packages
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          apt: name='{{ item }}' state=present
          with_items:
            - nginx
            - php7.1
            - php7.1-mysql
            - php7.1-fpm
            - php7.1-cli
            - php7.1-gd
            - php7.1-json
            - php7.1-mbstring
            - php7.1-mcrypt
            - php7.1-readline
            - php7.1-xml
            - php7.1-zip
            - python-pip
            - mysql-server
            - mysql-client
            - libmysqlclient-dev
            - certbot
            - python-mysqldb

        - name: Create a new databases
          mysql_db:
            name: "{{ domainShort }}"
            login_user: "{{ mysqluser }}"
            login_password: "{{ mysqlpassword }}"
            state: present

        - name: Create a new user
          mysql_user:
            name: "{{ domainShort }}"
            login_user: "{{ mysqluser }}"
            login_password: "{{ mysqlpassword }}"
            password: "{{db_password}}"
            priv: '*.*:ALL'
            state: present
          register: wp_password

        - name: create www folder
          file:
            path: "/var/www/{{domainLong}}"
            state: directory
            mode: 0755

        - name: extract wordpress
          unarchive:
            src: https://wordpress.org/latest.tar.gz
            dest: "/var/www/{{domainLong}}"
            remote_src: yes
            extra_opts: [--strip-components=1]


        - cloudflare_dns:
            zone: "{{domainLong}}"
            record: www
            type: A
            value: "{{ipv4}}"
            account_email: "{{cfemail}}"
            account_api_token: "{{cfapi}}"
          register: record

        - cloudflare_dns:
            zone: "{{domainLong}}"
            type: A
            value: "{{ipv4}}"
            account_email: "{{cfemail}}"
            account_api_token: "{{cfapi}}"
          register: record

        - cloudflare_dns:
            zone: "{{domainLong}}"
            record: www
            type: AAAA
            value: "{{ipv6}}"
            account_email: "{{cfemail}}"
            account_api_token: "{{cfapi}}"
          register: record

        - cloudflare_dns:
            zone: "{{domainLong}}"
            type: AAAA
            value: "{{ipv6}}"
            account_email: "{{cfemail}}"
            account_api_token: "{{cfapi}}"
          register: record

        - name: Fetch random salts for WordPress config
          local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/
          register: "wp_salt"


        - name: create letsencrypt directory
          file: name=/var/www/letsencrypt state=directory

        - name: Install nginx config for HTTPS site
          template:
              src: configs/nginxconfig.conf.j2
              dest: "/etc/nginx/sites-enabled/{{domainLong}}.conf"

        - name: Install nginx config
          copy:
              src: configs/nginx.conf
              dest: "/etc/nginx/nginx.conf"

        - name: Install Wordpress config
          template:
            src: configs/wp-config-sample.php.j2
            dest: "/var/www/{{domainLong}}/wp-config.php"

        - name: generate letsencrypt certificate
          shell: certbot certonly --agree-tos -a standalone -m {{ cfemail }} -d {{domainLong}} -d www.{{domainLong}}
          args:
            creates: /etc/letsencrypt/live/{{ domainLong }}


        - name: start services
          service:
              name: nginx
              state: started

        - name: start services
          service:
              name: php7.1-fpm
              state: started

        - name: Add letsencrypt cronjob for cert renewal
          cron:
            name: letsencrypt_renewal
            special_time: weekly
            job: service nginx stop && letsencrypt --renew certonly -n -a standalone -m {{ cfemail }} --agree-tos -d {{ domainLong }} -d www.{{domainLong}} && service nginx restart

        - name: restart NGINX for new config to take effect
          service:
            name: nginx
            state: restarted
